@using Radzen
@using HttpClients.ClientIntefaces
@page "/viewOrder"
@inject IOrderService _service;
@inject NavigationManager NavMgr;

<PageTitle>Index</PageTitle>

<RadzenText TextStyle="TextStyle.H5" TagName="TagName.H1" Class="my-4">
   
</RadzenText>

<div>
    <div class="container">
        
        <div class="container p-4">
            <div class="row">
                <div class="col-3">
                    <h6 class="text-uppercase" align="center">View order</h6>
                </div>

            </div>
        </div>


        <div>
            <RadzenDataGrid FilterMode="FilterMode.Simple" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="Order" Data="orders">
                <Columns>
                   
                    <RadzenDataGridColumn TItem="Order" Property="OrderID" Title="OrderID" Width="50px" TextAlign="TextAlign.Center"  />
                    
                    <RadzenDataGridColumn Filterable="false" Sortable="false" TItem="Order" Property="OrderTime" Title="Order time" Width="450px" TextAlign="TextAlign.Center"  />
                    
                    
                    <RadzenDataGridColumn TItem="Order" Property="IsPacked" Title="Is packed" Width="200px" TextAlign="TextAlign.Center"  />
                    
                                        
                   
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
    
</div>



@code 
{
    OrderIsPacked? currentOrder;
    IEnumerable<string> selectedCompanyNames;


    public enum OrderIsPacked
    { 
        nottrue,
        notfalse,
        All = -1
        
        
    }

   
    
    public class Order {
        public int OrderID { get; set; }
        public String OrderTime { get; set; }
        public bool IsPacked { get; set; }
        public OrderIsPacked OrderIsPacked { get; set; }
    }

    private List<Order> orders = new List<Order>() 
    {
        new Order {OrderTime = "10:10:10", IsPacked = true, OrderID = 1},
        new Order {OrderTime = "10:10:10", IsPacked = false, OrderID = 2},
        new Order {OrderTime = "10:10:10", IsPacked = true, OrderID = 3},
        new Order {OrderTime = "10:10:10", IsPacked = true, OrderID = 4},
        new Order {OrderTime = "10:10:10", IsPacked = false, OrderID = 5}
    };
    
    void OnSelectedIsPackedChange(object value)
    {
        if (selectedCompanyNames != null && !selectedCompanyNames.Any())
        {
            selectedCompanyNames = null;  
        }
    }

    void OnSelectedTOCChange(object value)
    {
        if (currentOrder == OrderIsPacked.All)
        {
            currentOrder = null;
        }
    }

}