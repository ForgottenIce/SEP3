@page "/Order/{OrderId:long}"
@using BlazorClient.Util;
@using HttpClients.ClientIntefaces;
@using Radzen
@using global::Shared.Models
@using HttpClients.ClientImplementations
@using HttpClients.ClientInterfaces
@inject IOrderService OrderService
@inject INotifierService NotifierService


<div class="container">
    <div class="row">
        <div class="col">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.H4">Order: @OrderId</RadzenText>
                @if (_order != null) {
                    <RadzenText TextStyle="TextStyle.H6">Customer: @_order.Customer.FullName</RadzenText>
                    <RadzenText TextStyle="TextStyle.H6" Text="Products" />
                    <RadzenDataGrid FilterMode="FilterMode.Simple" AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="ProductExtension" Data="_products" class="mb-2">
                        <Columns>
                            <RadzenDataGridColumn TItem="ProductExtension" Property="Id" Title="Id" Width="75px" TextAlign="TextAlign.Center"  />
                            <RadzenDataGridColumn TItem="ProductExtension" Property="Name" Title="Name" Width="450px" TextAlign="TextAlign.Center"  />
                            <RadzenDataGridColumn TItem="ProductExtension" Property="Description" Title="Description" TextAlign="TextAlign.Center"  />
                            <RadzenDataGridColumn TItem="ProductExtension" Property="Price" Title="Price" TextAlign="TextAlign.Center"  />
                            <RadzenDataGridColumn TItem="ProductExtension" Filterable="false" Sortable="false" Title="Mark as Packaged" Width="200px" TextAlign="TextAlign.Center">
                                <Template Context="product">
                                    <RadzenCheckBox TValue="bool" @bind-Value="product.IsPackaged" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>   
                }
                <RadzenButton Text="Mark Order as Packaged" Disabled="@(_products.Any(p => !p.IsPackaged) ? true : false)" Click="@MarkAsPackaged"/>
            </RadzenCard>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public long OrderId { get; set; }

    private class ProductExtension : Product {
        public bool IsPackaged { get; set; }
    }

    private Order _order = null!;
    private List<ProductExtension> _products = new();

    protected override async Task OnInitializedAsync() {
        try {
            _order = await OrderService.GetOrderByIdAsync(OrderId);
            foreach (Product product in _order.OrderedProducts) {
                _products.Add(new ProductExtension() {
                    Id = product.Id,
                    Name = product.Name,
                    Description = product.Description,
                    Price = product.Price,
                    IsPackaged = false
                });
            }
        }
        catch (Exception e) {
            NotifierService.NotifyError(e.Message);
        }
    }

    private void MarkAsPackaged() {
        NotifierService.NotifyInfo("Not implemented yet", duration:4000);
    }

}