@page "/AddProductToWarehouse"
<h3>AddProductToWarehouse</h3>
@using Radzen
@using HttpClients.ClientIntefaces
@using global::Shared.Dtos
@using global::Shared.Models
@using BlazorClient.Util
@inject NotificationService NotificationService
@inject NavigationManager navMgr
@inject DialogService DialogService
@inject IWarehouseProductService warehouseProductService
@inject IProductService productService
@inject IWarehouseService warehouseService
@inject IWarehousePositionService warehousePositionService


<div class="container">
    <div class="row">
        <div class="col">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Warehouse Products</RadzenText>
                <RadzenDropDown Style="width:300px" TValue="Warehouse" Placeholder="Select Warehouse" Data="@_warehouses" Change=@(() => GetProducts(_selectedWarehouse.Id)) TextProperty="Name" class="mb-2" @bind-Value=@_selectedWarehouse />
                <RadzenDataGrid TItem="Product" Data="@_products" PageSize="10" AllowPaging="true" AllowFiltering="true" FilterMode="FilterMode.SimpleWithMenu" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selectedProduct class="mb-2">
                    <Columns>
                        <RadzenDataGridColumn TItem="Product" Property="Id" Title="Product Id" Width="150px" TextAlign="TextAlign.Center"/>
                        <RadzenDataGridColumn TItem="Product" Property="Name" Title="Name" Width="150px" Sortable="false" />
                        <RadzenDataGridColumn TItem="Product" Property="Description" Title="Description" Width="500px" TextAlign="TextAlign.Center" />
                        <RadzenDataGridColumn TItem="Product" Property="Price" Title="Price" Width="100px" TextAlign="TextAlign.Center" Filterable="false"/>
                    </Columns>
                </RadzenDataGrid>
                <RadzenButton Text="Add to Warehouse" Disabled="@(_selectedProduct == null || _selectedWarehouse == null  ? true : false)" Click="OpenCreationDialog"/>
            </RadzenCard>
        </div>
    </div>
</div>
@code 
{
    private IEnumerable<Product> _products = null;
    private IEnumerable<Warehouse> _warehouses = null;
    private IEnumerable<WarehouseProduct> _warehouseProducts = null;
    private IEnumerable<WarehousePosition> _warehousePositions = null;
    private ICollection<WarehousePosition> _displayWarehousePosition;

    private IList<Product> _selectedProduct;
    private Warehouse _selectedWarehouse;
    private int _quantity = 0;
    private int _minQuantity = 0;
    private string _position = "";

    protected override async Task OnInitializedAsync() {
        try {
            _warehouses = await warehouseService.GetWarehousesAsync();
            _products = await productService.GetProductsAsync();
            _warehousePositions = await warehousePositionService.GetAsync();
            _displayWarehousePosition = new List<WarehousePosition>();
        }
        catch (Exception e) {
            Notifier.NotifyError(NotificationService,null,e.Message,-1);
        }
    }

    private async Task OpenCreationDialog(){
        _displayWarehousePosition.Clear();
        foreach (var warehousePosition in _warehousePositions) {
            if (_warehouseProducts.All(p => p.WarehousePosition != warehousePosition.Position)) {
                _displayWarehousePosition.Add(warehousePosition);
            }
        }
        var result = await DialogService.OpenAsync("Add Product to Warehouse", ds =>
            @<div>
                <p class="mb-4">Add <b>@_selectedProduct.First().Name</b> to <b>@_selectedWarehouse.Name</b></p>
                <div class="row">
                    <div class="col d-flex flex-column">
                        <RadzenText TextStyle="TextStyle.Overline"Text="Quantity"/>
                        <RadzenNumeric class="mb-2" Min="0" TValue="int" @bind-Value=_quantity></RadzenNumeric>
                        <RadzenText TextStyle="TextStyle.Overline"Text="Minimum Quantity"/>
                        <RadzenNumeric class="mb-2" Min="0" TValue="int" @bind-Value=_minQuantity></RadzenNumeric>
                        <RadzenText TextStyle="TextStyle.Overline"Text="Position"/>
                        <RadzenDropDown class="mb-2" AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" TValue="string" @bind-Value=_position 
                                        Data="_displayWarehousePosition" TextProperty="Position" ValueProperty="Position" Placeholder="Warehouse Position"/>
                        <RadzenButton Text="Confirm" Click="async () => {await CreateWarehouseProduct(_selectedProduct.First().Id, _selectedWarehouse.Id); ds.Close();}" ButtonStyle="ButtonStyle.Light" Class="me-1"/>
                    </div>
                </div>
            </div>
        );
    }
    
    private async Task GetProducts(long id) {
        try {
            _warehouseProducts = await warehouseProductService.GetWarehouseProductsByWarehouseAsync(id);
        }
        catch (Exception e) {
            Notifier.NotifyError(NotificationService,null,e.Message,-1);
        }
    }
    
    private async Task CreateWarehouseProduct(long productId, long warehouseId) {
        try {
            WarehouseProduct warehouseProduct = await warehouseProductService.CreateWarehouseProductAsync(new WarehouseProductCreationDto {
                    ProductId = productId,
                    WarehouseId = warehouseId,
                    Quantity = _quantity,
                    MinimumQuantity = _minQuantity,
                    WarehousePosition = _position
                });
            _quantity = 0;
            _minQuantity = 0;
            _position = "";
            Notifier.NotifySuccess(NotificationService,null, "Warehouse Created",null);
            await GetProducts(warehouseId);
        }
        catch (Exception e) {
            Notifier.NotifyError(NotificationService,null,e.Message,-1);
        }
    }
}