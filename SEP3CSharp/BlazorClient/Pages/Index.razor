@page "/"
@using HttpClients.ClientInterfaces
@using Radzen
@inject IAuthService AuthService
@inject NavigationManager NavMgr
<PageTitle>Index</PageTitle>

<div>
    <div class="container">
        <div class="row">
            <RadzenCard class="d-flex justify-content-around">
                <AuthorizeView>
                    <NotAuthorized>
                        <RadzenText class="w-100 text-center" TextStyle="TextStyle.H5" Text="Please login"/>
                    </NotAuthorized>
                </AuthorizeView>
                <AuthorizeView Roles="Manager,SysAdmin">
                    <RadzenButton Size="ButtonSize.Large" class="h4" Text="Product" Click="@(() => NavMgr.NavigateTo("Products"))"/>
                </AuthorizeView>
                <AuthorizeView Roles="Manager,Warehouse,SysAdmin">
                    <RadzenButton Size="ButtonSize.Large" class="h4" Text="Inventory" Click="@(() => NavMgr.NavigateTo("Inventory"))"/>
                </AuthorizeView>
                <AuthorizeView Roles="Cashier,Manager,SysAdmin">
                    <RadzenButton Size="ButtonSize.Large" class="h4" Text="Customers" Click="@(() => NavMgr.NavigateTo("Customers"))"/>
                </AuthorizeView>
                <AuthorizeView>
                    <RadzenButton Size="ButtonSize.Large" class="h4" Text="Orders" Click="@(() => NavMgr.NavigateTo("Orders"))"/>
                </AuthorizeView>
            </RadzenCard>
        </div>
        <RadzenCard class="row mt-4 p-5 w-50">
            <RadzenText TextStyle="TextStyle.H3" Text="Users"/>
            <RadzenText Text="username: bob, password: bobson4, role: Manager"/>
            <RadzenText Text="username: steve, password: stevesteve3, role: Cashier"/>
            <RadzenText Text="username: ware, password: warehouse2, role: Warehouse"/>
            <RadzenText Text="username: anders, password: adminpower5, role: SysAdmin"/>
        </RadzenCard>
    </div>
</div>


@code {
    private string _userName = string.Empty;
    private string _password = string.Empty;
    private string _errorLabel = "";

    private async Task LoginAsync()
    {
        _errorLabel = "";
        try
        {
            await AuthService.LoginAsync(_userName, _password);
            NavMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _errorLabel = $"Error: {e.Message}";
        }
    }
    
public class Order
{

    String _totalOrder;


    public Order(string totalOrder)
    {
        this._totalOrder = totalOrder;
    }

    public string Total
    {
        get => _totalOrder;
        set => _totalOrder = value ?? throw new ArgumentNullException(nameof(value));
    }
}
}